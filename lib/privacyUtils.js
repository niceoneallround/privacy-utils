/*jslint node: true, vars: true */

var assert = require('assert'),
  jsonldUtils = require('jsonld-utils/lib/jldUtils'),
  PPN_T =  require('data-models/lib/PrivacyPNDataModel').TYPE,
  PPN_OCTX_URL = require('data-models/lib/PrivacyPNDataModel').OCTX_URL,
  util = require('util');

// This obfuscation hides all information about the value, for example that it represents a SSN and the SSN value
//
// The obfuscated 'value' has the following properties
// 1. Contains encrypted representation of the node or value generated by an external obfuscation service - this contains all the information needed by the external service to decrypt
// 2. Contains an obfuscation context ID that can be use by the PN to decrypt the data. The context may contain privacy pipe info, categorization information, and other.
//
// The following is an example
//
//  {'@id': 'someId',
//   '@type': ['aetna_t:Subject'],
//   'atena_p:SSN': 'ssn_1'}
//
//  {'@id': 'someId',
//   '@type' ['atena_t:Subject'],
//   'atena_p:SSN': {
//      '@type' : [ 'http://privacy.pn.schema.webshield.io/octx#some_context_id]   // uuid identifies context needed by pn to de-crypt
//      '@value': 'encrypted value from external source'
//    }
//  }
//
// props.tags - an array of tags to add to @type - optional
// props.octx - the obfuscation context used to decrypt
// props.evalue - the encryted value - required
function createValue(props) {
  'use strict';
  assert(props, util.format('privacyUtils.createValue - no props provided'));
  assert(props.evalue, util.format('privacyUtils.createValue no props.evalue provided:%j', props));
  assert(props.octx, util.format('privacyUtils.createValue no props.octx provided:%j', props));
  return jsonldUtils.createV({value: props.evalue, type: props.octx});
}

//
// Check if obfuscated by seeing if @type contains a value with that has a substring of the obfuscation context
//
function isObfuscated(prop) {
  'use strict';

  function compare2OctxUrl(value) {
    var i;
    if (value['@type']) {
      if (Array.isArray(value['@type'])) {
        for (i = 0; i < value['@type'].length; i++) {
          if (value['@type'][i].indexOf(PPN_OCTX_URL) !== -1) {
            return true;
          }
        }
      } else {
        return (value['@type'].indexOf(PPN_OCTX_URL) !== -1);
      }
    } else {
      return false;
    }
  }

  if (!Array.isArray(prop)) {
    return compare2OctxUrl(prop);
  } else if (prop.length === 0) {
    return false;
  } else {
    assert((prop.length === 1), util.format('prop is an array of more than one item - cannot determine if obfusctaed so barf:%j', prop));
    return compare2OctxUrl(prop[0]);
  }

  // check if the type contains the obbfuscation context URL
  return jsonldUtils.isType(prop, PPN_T.Obfuscated);
}

module.exports = {
  createValue: createValue,
  isObfuscated: isObfuscated
};
