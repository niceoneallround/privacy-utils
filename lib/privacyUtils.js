/*jslint node: true, vars: true */

var assert = require('assert'),
  jsonldUtils = require('jsonld-utils/lib/jldUtils'),
  PPN_T =  require('data-models/lib/PrivacyPNDataModel').TYPE,
  util = require('util');

// This obfuscation hides all information about the value, for example that it represents a SSN and the SSN value
//
// The obfuscated 'value' has the following properties
// 1. Contains encrypted representation of the node or value generated by an external obfuscation service - this contains all the information needed by the external service to decrypt
// 2. Contains metadata allowing the PN to route the message to the correct external obfuscation service
// 3. Contains obfuscation categorization information informing parties what operations can be peformed on the data
//
// The following is an example
//
//  {'@id': 'someId',
//   '@type': ['aetna_t:Subject'],
//   'atena_p:SSN': 'ssn_1'}
//
//  {'@id': 'someId',
//   '@type' ['atena_t:Subject'],
//   'atena_p:SSN': {
//      '@type' : [
//        'http://privacy.pn.schema.webshield.io/type#Obfuscated',   // value is obfuscated
//        'http://privacy.pn.schema.webshield.io/tag#OpaqueToken,  // value is an opaque token - cannot be used for anything
//        'http://privacy.pn.schema.webshield.io/octx#pipe_generated_uuid   // uuid identifies context needed by pn to de-crypt
//        ]
//      '@value': 'encrypted value from external source'
//    }
//  }
//
// props.tags - an array of tags to add to @type - optional
// props.octx - the otype used to de-crypt see abobve - required
// props.evalue - the encryted value - required
function createValue(props) {
  'use strict';
  var type;
  assert(props, util.format('privacyUtils.createValue - no props provided'));
  assert(props.evalue, util.format('privacyUtils.createValue no props.evalue provided:%j', props));
  assert(props.octx, util.format('privacyUtils.createValue no props.octx provided:%j', props));
  assert(!Array.isArray(props.octx), util.format('privacyUtils.createValue props.octx cannot be an array:%j', props));

  if (props.tags) {
    if (Array.isArray(props.tags)) {
      type = props.tags.slice(); // clone just in case any bs
    } else {
      type = [props.tags];
    }
  } else {
    type = [];
  }

  type.push(PPN_T.Obfuscated);
  type.push(props.octx);

  return jsonldUtils.createV({value: props.evalue, type: type});
}

function isObfuscated(prop) {
  'use strict';
  return jsonldUtils.isType(prop, PPN_T.Obfuscated);
}

module.exports = {
  createValue: createValue,
  isObfuscated: isObfuscated
};
