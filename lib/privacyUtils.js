/*jslint node: true, vars: true */

var assert = require('assert'),
  jsonldUtils = require('jsonld-utils/lib/jldUtils'),
  PPN_OCTX_URL = require('data-models/lib/PrivacyPNDataModel').OCTX_URL,
  util = require('util');

// DEPRECATED - This obfuscation hides all information about the value, for example that it represents a SSN and the SSN value
//
// The obfuscated 'value' has the following properties
// 1. Contains encrypted representation of the node or value generated by an external obfuscation service - this contains all the information needed by the external service to decrypt
// 2. Contains an obfuscation context ID that can be use by the PN to decrypt the data. The context may contain privacy pipe info, categorization information, and other.
//
// The following is an example
//
//  {'@id': 'someId',
//   '@type': ['aetna_t:Subject'],
//   'atena_p:SSN': 'ssn_1'}
//
//  {'@id': 'someId',
//   '@type' ['atena_t:Subject'],
//   'atena_p:SSN': {
//      '@type' : [ 'http://privacy.pn.schema.webshield.io/octx#some_context_id]   // uuid identifies context needed by pn to de-crypt
//      '@value': 'encrypted value from external source'
//    }
//  }
//
// props.octx - the obfuscation context used to decrypt
// props.evalue - the encryted value - required
// DEPRECATED
function createValue(props) {
  'use strict';
  assert(props, util.format('privacyUtils.createValue - no props provided'));
  assert(props.evalue, util.format('privacyUtils.createValue no props.evalue provided:%j', props));
  assert(props.octx, util.format('privacyUtils.createValue no props.octx provided:%j', props));
  return jsonldUtils.createV({ value: props.evalue, type: props.octx });
}

//
// Utility routine that creates an obfuscted JSONLD typed value from a passed in 'value' and a passed in 'obfuscstion context'.
//
// The 'value' is the obfuscatated value (token, hash, random, encrypted value, etc) and is placed in the @value property. If reversable
// it can passed to the service to reverse it.
//
// The 'obfusction context' is an instance or an array holding the below. It is stored in the @type property
//  - 1 PN obfuscation tag needed by a privacy algorithm to understand how to orchestrate the reversing of the value, may be a obfuscated.
//  - 0-n PN meta tags about the obfuscated value, for example comparible. May be obfuscated.
//  - 0-n tags added by the external obfuscation service
//
//
// The following is an example
//
//  {'@id': 'someId',
//   '@type': ['ACME_T:Subject'],
//   'ACME_P:SSN': 'ssn_1'}
//
//  {'@id': 'someId',
//   '@type' ['atena_t:Subject'],
//   'ACME_P:SSN': {
//     '@type' : [
//       'https://privacy.pn.schema.webshield.io/patag#(some value), // used by privacy algorithm (id, jwt, etc)
//       'https://privacy.pn.schema.webshield.io/type#comparible', // used by parties looking at privacy graph
//       'https://(external-service-hostname).pn.schema.io/eostag#(some value)' // used by external obfuscation service
//     '@value': 'encrypted value from external source'
//    }
//  }
//
// props.octx - the obfuscation context
// props.evalue - the encryted value
function createObfuscatedValue(props) {
  'use strict';
  assert(props, util.format('privacyUtils.createValue - no props provided'));
  assert(props.evalue, util.format('privacyUtils.createValue no props.evalue provided:%j', props));
  assert(props.octx, util.format('privacyUtils.createValue no props.octx provided:%j', props));
  return jsonldUtils.createV({ value: props.evalue, type: props.octx });
}

//
// Check if obfuscated by seeing if @type contains a value with that has a substring of the obfuscation context (OLD)
// or has a substring of a privacy algorithm tag
//
// @typedValue - can be a singleton or an array with 1 instance
function isObfuscated(typedValue) {
  'use strict';

  function compare2OctxUrl(value) {
    var i;
    if (value['@type']) {
      if (Array.isArray(value['@type'])) {
        for (i = 0; i < value['@type'].length; i++) {
          if (value['@type'][i].indexOf(PPN_OCTX_URL) !== -1) {
            return true;
          }
        }
      } else {
        return (value['@type'].indexOf(PPN_OCTX_URL) !== -1);
      }
    } else {
      return false;
    }
  }

  if (!Array.isArray(typedValue)) {
    return compare2OctxUrl(typedValue);
  } else if (typedValue.length === 0) {
    return false;
  } else {
    assert((typedValue.length === 1),
      util.format('typedValue is an array of more than one item - cannot determine if obfusctaed so barf:%j', typedValue));
    return compare2OctxUrl(typedValue[0]);
  }
}

module.exports = {
  createObfuscatedValue: createObfuscatedValue,
  isObfuscated: isObfuscated,

  // DEPRECATED
  createValue: createValue
};
